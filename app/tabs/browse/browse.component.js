"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var message_service_1 = require("../../message.service");
var BrowseComponent = /** @class */ (function () {
    function BrowseComponent(messageService) {
        var _this = this;
        this.messageService = messageService;
        this.nl = "\n";
        this.computeStatus = messageService.computeStatus;
        this._subscriptionCS = messageService.computeStatusSource.subscribe(function (status) {
            _this.computeStatus = status;
        });
        this.pois = messageService.listPathPOIText;
        this._subscriptionPT = messageService.listPathPOITextSource.subscribe(function (list) {
            _this.pois = list;
        });
    }
    BrowseComponent.prototype.showPOIs = function () {
        console.log(this.pois);
    };
    BrowseComponent.prototype.ngOnInit = function () {
    };
    BrowseComponent.prototype.ngOnDestroy = function () {
        // prevent memory leak
        this._subscriptionCS.unsubscribe();
        this._subscriptionPT.unsubscribe();
    };
    BrowseComponent = __decorate([
        core_1.Component({
            selector: "Browse",
            moduleId: module.id,
            templateUrl: "./browse.component.html"
        }),
        __metadata("design:paramtypes", [message_service_1.MessageService])
    ], BrowseComponent);
    return BrowseComponent;
}());
exports.BrowseComponent = BrowseComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJyb3dzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBa0Q7QUFDbEQseURBQXVEO0FBT3ZEO0lBV0kseUJBQW9CLGNBQThCO1FBQWxELGlCQVVDO1FBVm1CLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQVIzQyxPQUFFLEdBQUcsSUFBSSxDQUFDO1FBU2IsSUFBSSxDQUFDLGFBQWEsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU07WUFDdkUsS0FBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUM7UUFDM0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLFVBQUMsSUFBSTtZQUN2RSxLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELGtDQUFRLEdBQVI7SUFDQSxDQUFDO0lBRUQscUNBQVcsR0FBWDtRQUNJLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQWxDUSxlQUFlO1FBTDNCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHlCQUF5QjtTQUN6QyxDQUFDO3lDQVlzQyxnQ0FBYztPQVh6QyxlQUFlLENBbUMzQjtJQUFELHNCQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7QUFuQ1ksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL21lc3NhZ2Uuc2VydmljZVwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJCcm93c2VcIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2Jyb3dzZS5jb21wb25lbnQuaHRtbFwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIHB1YmxpYyBjb21wdXRlU3RhdHVzO1xyXG4gICAgcHVibGljIG5sID0gXCJcXG5cIjtcclxuICAgIHB1YmxpYyBwb2lzO1xyXG5cclxuICAgIC8vcHVibGljIHRlc3RzID0gW1wiRWFybGhhbSBTdHJlZXQ6IGFtZW5pdHksIG1vdG9yY3ljbGUgcGFya2luZzsgdG91cmlzbSwgaG90ZWwsIE1lcmNlciBTdHJlZXQgSG90ZWw7IGFtZW5pdHksIGNhZmUsIENhZmZlIE5lcm87IGNsb3RoZXMgc2hvcCwgRmFyYWg7IGNsb3RoZXMgc2hvcCwgRm94aGFsbDsgdmFjYW50IHNob3A7IHllcyBzaG9wLCBNYWdtYTsgYW1lbml0eSwgaW5kaWFuIHJlc3RhdXJhbnQsIFNhcnRhaiBSZXN0YXVyYW50OyBjbG90aGVzIHNob3AsIFN1cGVyIFN1cGVyZmljaWFsIEdhbGxlcnkgU2V2ZW47IGFudGlxdWVzIHNob3AsIFRoZSBWaW50YWdlIFNob3dyb29tOyBhbWVuaXR5LCBidWJibGUgdGVhIGNhZmUsIFlhbyBZYW8gQ2hhOyBiaWN5Y2xlIHNob3AsIEZpeGF0aW9uIExvbmRvbjsgY2xvdGhlcyBzaG9wLCBGaW5pc3RlcnJlOyBjbG90aGVzIHNob3AsIEluZHVzdHJpZTsgY2xvdGhlcyBzaG9wLCBMZSBDb3EgU3BvcnRpZjsgY2xvdGhlcyBzaG9wLCBDYXJoYXJ0dDsgYXJ0IHNob3AsIFRoZSBVbml0LiBcIixcIk1vbm1vdXRoIFN0cmVldDogYW1lbml0eSwgYmljeWNsZSBwYXJraW5nOyBhbWVuaXR5LCBjYWZlLCBMYSBCb3R0ZWdhOyBoYWlyZHJlc3NlciBzaG9wLCBTYXNvb24gU2Fsb247IGNsb3RoZXMgc2hvcCwgTG9mdDsgc2hvZXMgc2hvcCwgUG9zdGUgTWlzdHJlc3M7IGNsb3RoZXMgc2hvcDsgYmVhdXR5IHNob3AsIFNjcmVlbiBGYWNlOyBhbWVuaXR5LCByZXN0YXVyYW50LCBLb3BhcGE7IGNsb3RoZXMgc2hvcCwgQmFzZSBGYXNoaW9uczsgYW1lbml0eSwgcHViLCBUaGUgVHdvIEJyZXdlcnM7IGFtZW5pdHksIGJ1YmJsZSB0ZWEgY2FmZSwgWWFvIFlhbyBDaGE7IGpld2Vscnkgc2hvcCwgTGF1cmEgTGVlOyBqZXdlbHJ5IHNob3AsIFRhdHR5IERldmluZTsgY2xvdGhlcyBzaG9wLCBOYXR1cmFsIFNlbGVjdGlvbjsgY29zbWV0aWNzIHNob3AsIExlIExhYm8uIFwiLFwiRWFybGhhbSBTdHJlZXQ6IGFtZW5pdHksIHRvaWxldHM7IGJpY3ljbGUgc2hvcCwgQnJvb2tzOyBhbWVuaXR5LCB3YXN0ZSBiYXNrZXQ7IGNsb3RoZXMgc2hvcCwgU3VwZXJkcnk7IGFtZW5pdHksIHRoZWF0cmUsIERvbm1hciBXYXJlaG91c2U7IGFtZW5pdHksIGJlbGdpYW4gcmVzdGF1cmFudCwgQmVsZ28gQ2VudHJhYWw7IGNob2NvbGF0ZSBzaG9wLCBSb2NvY28gQ2hvY29sYXRlczsgYW1lbml0eSwgY29tbXVuaXR5IGNlbnRyZSwgQ292ZW50IEdhcmRlbiBDb21tdW5pdHkgQ2VudHJlOyBhbWVuaXR5LCB0aGVhdHJlLCBDYW1icmlkZ2UgVGhlYXRyZS4gLE1vbm1vdXRoIFN0cmVldDogYW1lbml0eSwgY2FmZSwgTW9ubW91dGggQ2FmZTsgYW1lbml0eSwgcG9zdCBib3g7IHRvdXJpc20sIGhvdGVsLCBTZXZlbiBEaWFscyBIb3RlbDsgYW1lbml0eSwgcmVzdGF1cmFudCwgQ2FmZSBQYXN0YTsgYW1lbml0eSwgYmljeWNsZSBwYXJraW5nOyBhbWVuaXR5LCB3YXN0ZSBiYXNrZXQ7IGFtZW5pdHksIHJlc3RhdXJhbnQsIE1vbiBQbGFpc3RvdzsgdG91cmlzbSwgaG90ZWwsIE1lcmNlciBTdHJlZXQgSG90ZWw7IGZ1cm5pdHVyZSBzaG9wLCBNb2x0ZW5pICYgQyBEYWRhOyBvcHRpY2lhbiBzaG9wLCBTcGV4OyBjbG90aGVzIHNob3AsIENvY28gZGUgTWVyOyBjbG90aGVzIHNob3AsIFVuY29uZGl0aW9uYWw7IHRpY2tldCBzaG9wLCBMb25kb24gVGhlYXRyZSBCb29raW5nczsgdG91cmlzbSwgaG90ZWwsIENvdmVudCBHYXJkZW4gSG90ZWw7IGFtZW5pdHksIGZyZW5jaCByZXN0YXVyYW50LCBNb24gUGxhaXNpcjsgeWVzIHNob3AsIENhdWRhbGllOyBjb25mZWN0aW9uZXJ5IHNob3AsIEhvdGVsIENob2NvbGF0OyB5ZXMgc2hvcCwgKE1hbGluK0dvZXR6KTsgcGVyZnVtZXJ5IHNob3AsIE1pbGxlciBIYXJyaXM7IHllcyBzaG9wLCBNdXJkb2NrLiAsTWVyY2VyIFN0cmVldDogdG91cmlzbSwgaG90ZWwsIE1lcmNlciBTdHJlZXQgSG90ZWwuIFwiLFwiU2V2ZW4gRGlhbHMgcm91bmRhYm91dDogaGlzdG9yaWMsIGNsb2NrLCBTZXZlbiBEaWFsczsgYW1lbml0eSwgYmljeWNsZSBwYXJraW5nOyBhbWVuaXR5LCByZXN0YXVyYW50LCBkaWFsOyB0b3VyaXNtLCBpbmZvcm1hdGlvbjsgYW1lbml0eSwgcmVzdGF1cmFudCwgS29wYXBhOyBhbWVuaXR5LCBiYXIsIExvdW5nZSBCYXI7IHRvdXJpc20sIGhvdGVsLCBNZXJjZXIgU3RyZWV0IEhvdGVsOyBvcHRpY2lhbiBzaG9wLCBTcGV4OyBjbG90aGVzIHNob3AsIExlIENvcSBTcG9ydGlmLiBcIixcIlNob3J0cyBHYXJkZW5zOiBhbWVuaXR5LCBhdG07IGNsb3RoZXMgc2hvcCwgRy1TdGFyIFJhdzsgY2xvdGhlcyBzaG9wLCBFbGVtZW50OyBiYWcgc2hvcCwgVGhlIENhbWJyaWRnZSBTYXRjaGVsIENvbXBhbnk7IG9yZ2FuaWMgc2hvcCwgTmVhbCdzIFlhcmQgRGFpcnk7IGJlYXV0eSBzaG9wLCBCZW5lZml0OyBhbWVuaXR5LCBwb3J0dWd1ZXNlIHJlc3RhdXJhbnQsIENhbmVsYTsgY29uZmVjdGlvbmVyeSBzaG9wLCBDaG9jY3l3b2NjeWRvb2RhaC4gXCIsXCJNZXJjZXIgU3RyZWV0OiAuIFwiXTsgXHJcblxyXG4gICAgcHVibGljIF9zdWJzY3JpcHRpb25DUztcclxuICAgIHB1YmxpYyBfc3Vic2NyaXB0aW9uUFQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmNvbXB1dGVTdGF0dXMgPSBtZXNzYWdlU2VydmljZS5jb21wdXRlU3RhdHVzO1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbkNTID0gbWVzc2FnZVNlcnZpY2UuY29tcHV0ZVN0YXR1c1NvdXJjZS5zdWJzY3JpYmUoKHN0YXR1cykgPT4geyBcclxuICAgICAgICAgICAgdGhpcy5jb21wdXRlU3RhdHVzID0gc3RhdHVzOyBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2lzID0gbWVzc2FnZVNlcnZpY2UubGlzdFBhdGhQT0lUZXh0O1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvblBUID0gbWVzc2FnZVNlcnZpY2UubGlzdFBhdGhQT0lUZXh0U291cmNlLnN1YnNjcmliZSgobGlzdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBvaXMgPSBsaXN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dQT0lzKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucG9pcyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgLy8gcHJldmVudCBtZW1vcnkgbGVha1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbkNTLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uUFQudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxufVxyXG4iXX0=